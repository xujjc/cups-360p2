name: Build OpenWrt for 360P2 (MT7628)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: openwrt/sdk:ramips-mt76x8-22.03.5
      options: --user root

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        path: openwrt-src

    - name: 查找SDK目录
      id: find-sdk
      run: |
        if [ -d "/builder" ]; then
          echo "SDK_DIR=/builder" >> $GITHUB_ENV
        elif [ -d "/sdk" ]; then
          echo "SDK_DIR=/sdk" >> $GITHUB_ENV
        elif [ -d "/openwrt" ]; then
          echo "SDK_DIR=/openwrt" >> $GITHUB_ENV
        else
          echo "::error::无法找到SDK目录"
          ls -la /
          exit 1
        fi
        echo "SDK_DIR=${{ env.SDK_DIR }}"

    - name: 准备编译环境
      run: |
        cd ${{ env.SDK_DIR }}
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install python3-distutils zlib

    - name: 彻底修复choice默认值警告
      run: |
        cd ${{ env.SDK_DIR }}
        export TERM=linux
        
        # 查找所有可能的配置文件
        CONFIG_FILES=$(find . -maxdepth 5 -type f \( -name "Config*.in" -o -name "config*.in" \) | grep -vE "tmp|build_dir|staging_dir")
        
        if [ -z "$CONFIG_FILES" ]; then
          echo "::error::未找到任何配置文件"
          find . -maxdepth 5 -type f | grep -i "config"
          exit 1
        fi
        
        # 修复每个找到的配置文件
        for file in $CONFIG_FILES; do
          echo "处理文件: $file"
          sed -i '/choice/,/endchoice/{
            /^[ \t]*default[ \t]\+/d
            /^[ \t]*config[ \t]\+[^#]*default[ \t]\+/s/default[ \t]\+[^ \t]*//g
            /^[ \t]*menuconfig[ \t]\+[^#]*default[ \t]\+/s/default[ \t]\+[^ \t]*//g
          }' "$file"
        done
        
        # 验证修复
        if grep -r "choice.*default" . --include="*.in" --exclude-dir={tmp,build_dir,staging_dir} 2>/dev/null; then
          echo "::error::仍发现choice默认值"
          exit 1
        else
          echo "✓ 所有choice默认值已移除"
        fi

    - name: 配置目标设备（严格非交互式）
      run: |
        cd ${{ env.SDK_DIR }}
        export TERM=linux
        
        # 清除任何可能的现有配置
        rm -f .config .config.old .menuconfig
        
        # 直接使用defconfig，不触发menuconfig
        echo "使用非交互式defconfig..."
        make ramips/mt76x8/hiwifi_hc5661a_defconfig
        
        # 验证配置是否正确生成
        if [ ! -f ".config" ]; then
          echo "::error::配置文件未生成"
          exit 1
        fi
        
        # 追加自定义配置
        cat >> .config << 'EOF'
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
        CONFIG_PACKAGE_wpad-basic=y
        CONFIG_PACKAGE_iptables-nft=y
        CONFIG_PACKAGE_cups=y
        CONFIG_PACKAGE_avahi-daemon=y
        CONFIG_PACKAGE_splix=y
        CONFIG_PACKAGE_p910nd=y
        CONFIG_PACKAGE_kmod-usb-printer=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_firewall=n
        CONFIG_PACKAGE_dnsmasq=n
        CONFIG_PACKAGE_odhcpd=n
        EOF
        
        # 生成最终配置（严格非交互式）
        echo "生成最终配置..."
        make defconfig > /dev/null 2>&1 || true
        
        # 验证最终配置
        echo "最终配置摘要:"
        grep -v "^#" .config | grep -v "^$" | wc -l
        grep -E "CONFIG_PACKAGE_luci|CONFIG_PACKAGE_cups" .config

    - name: 自定义固件设置
      run: |
        cd ${{ env.SDK_DIR }}
        export TERM=linux
        
        # 修改默认IP
        sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
        
        # 添加打印机服务发现
        mkdir -p files/etc/avahi/services
        cat > files/etc/avahi/services/ipp.service << 'EOF'
        <?xml version="1.0" standalone='no'?>
        <service-group>
          <name replace-wildcards="yes">360P2 打印机</name>
          <service>
            <type>_ipp._tcp</type>
            <subtype>_universal._sub._ipp._tcp</subtype>
            <port>631</port>
          </service>
        </service-group>
        EOF

    - name: 编译固件（严格非交互式）
      run: |
        cd ${{ env.SDK_DIR }}
        export TERM=linux
        
        # 设置环境变量确保非交互式编译
        export FORCE_UNSAFE_CONFIGURE=1
        export MAKEFLAGS="-j$(nproc) V=s"
        
        echo "开始编译..."
        make download
        make tools/install
        make toolchain/install
        make package/compile
        make package/index
        make
        
        # 检查固件
        if [ -f "bin/ramips/*.sysupgrade.bin" ]; then
          echo "固件生成成功"
          ls -la bin/ramips/*.sysupgrade.bin
        else
          echo "::error::固件未生成"
          ls -la bin/ramips/
          exit 1
        fi

    - name: 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-360p2-firmware
        path: bin/ramips/*.sysupgrade.bin
